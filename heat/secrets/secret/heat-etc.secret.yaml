# Source: heat/templates/configmap-etc.yaml
apiVersion: v1
kind: Secret
metadata:
  name: heat-etc
type: Opaque
data:
  rally_tests.yaml: |
    HeatStacks.create_and_delete_stack:
     args:
    template_path: /tmp/rally-jobs/resource_group_with_constraint.yaml
    runner:
    concurrency: 1
    times: 1
    type: constant
    sla:
    failure_rate:
    max: 0
    .create_and_list_stack:
     args:
    template_path: /tmp/rally-jobs/default.yaml
    runner:
    concurrency: 1
    times: 1
    type: constant
    sla:
    failure_rate:
    max: 0
    .create_check_delete_stack:
     args:
    template_path: /tmp/rally-jobs/random_strings.yaml
    runner:
    concurrency: 1
    times: 1
    type: constant
    sla:
    failure_rate:
    max: 0
    .create_snapshot_restore_delete_stack:
     args:
    template_path: /tmp/rally-jobs/random_strings.yaml
    runner:
    concurrency: 1
    times: 1
    type: constant
    sla:
    failure_rate:
    max: 0
    .create_stack_and_list_output:
     args:
    template_path: /tmp/rally-jobs/resource_group_with_outputs.yaml
      runner:
        concurrency: 1
        times: 1
        type: constant
      sla:
        failure_rate:
          max: 0
    HeatStacks.create_stack_and_list_output_via_API:
    - args:
        template_path: /tmp/rally-jobs/resource_group_with_outputs.yaml
      runner:
        concurrency: 1
        times: 1
        type: constant
      sla:
        failure_rate:
          max: 0
    HeatStacks.create_update_delete_stack:
    - args:
        template_path: /tmp/rally-jobs/random_strings.yaml
        updated_template_path: /tmp/rally-jobs/updated_random_strings_replace.yaml
      runner:
        concurrency: 1
        times: 1
        type: constant
      sla:
        failure_rate:
          max: 0
  heat.conf: | 
    [DEFAULT]
    heat_metadata_server_url = http://cloudformation.openstack.svc.cluster.local
    heat_waitcondition_server_url = http://cloudformation.openstack.svc.cluster.local/v1/waitcondition
    heat_watch_server_url = http://cloudwatch.openstack.svc.cluster.local
    host = heat-engine
    log_config_append = /etc/heat/logging.conf
    num_engine_workers = 1
    stack_domain_admin = heat-domain
    stack_domain_admin_password = password
    stack_user_domain_name = heat
    transport_url = rabbit://heat:password@rabbitmq-rabbitmq-0.rabbitmq.openstack.svc.cluster.local:5672,heat:password@rabbitmq-rabbitmq-1.rabbitmq.openstack.svc.cluster.local:5672/heat
    trusts_delegated_roles = 
    [clients]
    endpoint_type = internalURL
    [clients_heat]
    endpoint_type = publicURL
    [clients_keystone]
    auth_uri = http://keystone-api.openstack.svc.cluster.local:5000
    endpoint_type = internalURL
    [database]
    connection = mysql+pymysql://heat:password@mariadb.openstack.svc.cluster.local:3306/heat
    max_retries = -1
    [heat_api]
    bind_port = 8004
    workers = 1
    [heat_api_cfn]
    bind_port = 8000
    workers = 1
    [heat_api_cloudwatch]
    bind_port = 8003
    workers = 1
    [keystone_authtoken]
    auth_type = password
    auth_uri = http://keystone-api.openstack.svc.cluster.local:5000/v3
    auth_url = http://keystone-api.openstack.svc.cluster.local:5000/v3
    auth_version = v3
    memcache_secret_key = Ij0nmN1Ndm8QBlIEcJsSkbe7f819hKs40iAdI9B8qzF6KGW8d2iVEODzUdtlDmFW
    memcache_security_strategy = ENCRYPT
    memcached_servers = memcached.openstack.svc.cluster.local:11211
    password = password
    project_domain_name = service
    project_name = service
    region_name = RegionOne
    service_type = orchestration
    user_domain_name = service
    username = heat
    [oslo_messaging_notifications]
    driver = messagingv2
    [oslo_messaging_rabbit]
    rabbit_ha_queues = true
    [oslo_middleware]
    enable_proxy_headers_parsing = true
    [oslo_policy]
    policy_file = /etc/heat/policy.yaml
    [paste_deploy]
    api_paste_config = /etc/heat/api-paste.ini
    [trustee]
    auth_type = password
    auth_url = http://keystone-api.openstack.svc.cluster.local:5000
    auth_version = v3
    password = password
    region_name = RegionOne
    user_domain_name = service
    username = heat-trust

  heat-api-uwsgi.ini: |
    [uwsgi]
    add-header = Connection: close
    buffer-size = 65535
    die-on-term = true
    enable-threads = true
    exit-on-reload = false
    hook-master-start = unix_signal:15 gracefully_kill_them_all
    http-socket = 0.0.0.0:8004
    lazy-apps = true
    log-x-forwarded-for = true
    master = true
    processes = 1
    procname-prefix-spaced = heat-api:
    route-user-agent = ^kube-probe.* donotlog:
    thunder-lock = true
    worker-reload-mercy = 80
    wsgi-file = /var/lib/openstack/bin/heat-wsgi-api
    ==
  heat-api-cfn-uwsgi.ini: |
    [uwsgi]
    add-header = Connection: close
    buffer-size = 65535
    die-on-term = true
    enable-threads = true
    exit-on-reload = false
    hook-master-start = unix_signal:15 gracefully_kill_them_all
    http-socket = 0.0.0.0:8000
    lazy-apps = true
    log-x-forwarded-for = true
    master = true
    processes = 1
    procname-prefix-spaced = heat-api-cfn:
    route-user-agent = ^kube-probe.* donotlog:
    thunder-lock = true
    worker-reload-mercy = 80
    wsgi-file = /var/lib/openstack/bin/heat-wsgi-api-cfn

  logging.conf: |
    [formatter_context]
    class = oslo_log.formatters.ContextFormatter
    datefmt = %Y-%m-%d %H:%M:%S
    [formatter_default]
    datefmt = %Y-%m-%d %H:%M:%S
    format = %(message)s
    [formatters]
    keys = context,default
    [handler_null]
    args = ()
    class = logging.NullHandler
    formatter = default
    [handler_stderr]
    args = (sys.stderr,)
    class = StreamHandler
    formatter = context
    [handler_stdout]
    args = (sys.stdout,)
    class = StreamHandler
    formatter = context
    [handlers]
    keys = stdout,stderr,null
    [logger_amqp]
    handlers = stderr
    level = WARNING
    qualname = amqp
    [logger_amqplib]
    handlers = stderr
    level = WARNING
    qualname = amqplib
    [logger_boto]
    handlers = stderr
    level = WARNING
    qualname = boto
    [logger_eventletwsgi]
    handlers = stderr
    level = WARNING
    qualname = eventlet.wsgi.server
    [logger_heat]
    handlers = stdout
    level = INFO
    qualname = heat
    [logger_root]
    handlers = null
    level = WARNING
    [logger_sqlalchemy]
    handlers = stderr
    level = WARNING
    qualname = sqlalchemy
    [loggers]
    keys = root,heat

  api-paste.ini: | 
    [app:apicfnv1app]
    heat.app_factory = heat.api.cfn.v1:API
    paste.app_factory = heat.common.wsgi:app_factory
    [app:apicwapp]
    heat.app_factory = heat.api.cloudwatch:API
    paste.app_factory = heat.common.wsgi:app_factory
    [app:apiv1app]
    heat.app_factory = heat.api.openstack.v1:API
    paste.app_factory = heat.common.wsgi:app_factory
    [filter:audit]
    audit_map_file = /etc/heat/api_audit_map.conf
    paste.filter_factory = keystonemiddleware.audit:filter_factory
    [filter:authpassword]
    paste.filter_factory = heat.common.auth_password:filter_factory
    [filter:authtoken]
    paste.filter_factory = keystonemiddleware.auth_token:filter_factory
    [filter:authurl]
    paste.filter_factory = heat.common.auth_url:filter_factory
    [filter:cfnversionnegotiation]
    heat.filter_factory = heat.api.cfn:version_negotiation_filter
    paste.filter_factory = heat.common.wsgi:filter_factory
    [filter:context]
    paste.filter_factory = heat.common.context:ContextMiddleware_filter_factory
    [filter:cors]
    oslo_config_project = heat
    paste.filter_factory = oslo_middleware.cors:filter_factory
    [filter:custombackendauth]
    paste.filter_factory = heat.common.custom_backend_auth:filter_factory
    [filter:cwversionnegotiation]
    heat.filter_factory = heat.api.cloudwatch:version_negotiation_filter
    paste.filter_factory = heat.common.wsgi:filter_factory
    [filter:ec2authtoken]
    paste.filter_factory = heat.api.aws.ec2token:EC2Token_filter_factory
    [filter:faultwrap]
    heat.filter_factory = heat.api.openstack:faultwrap_filter
    paste.filter_factory = heat.common.wsgi:filter_factory
    [filter:http_proxy_to_wsgi]
    paste.filter_factory = oslo_middleware:HTTPProxyToWSGI.factory
    [filter:osprofiler]
    paste.filter_factory = osprofiler.web:WsgiMiddleware.factory
    [filter:request_id]
    paste.filter_factory = oslo_middleware.request_id:RequestId.factory
    [filter:versionnegotiation]
    heat.filter_factory = heat.api.openstack:version_negotiation_filter
    paste.filter_factory = heat.common.wsgi:filter_factory
    [pipeline:heat-api]
    pipeline = cors request_id faultwrap http_proxy_to_wsgi versionnegotiation osprofiler authurl authtoken audit context apiv1app
    [pipeline:heat-api-cfn]
    pipeline = cors http_proxy_to_wsgi cfnversionnegotiation osprofiler ec2authtoken authtoken audit context apicfnv1app
    [pipeline:heat-api-cfn-standalone]
    pipeline = cors http_proxy_to_wsgi cfnversionnegotiation ec2authtoken context apicfnv1app
    [pipeline:heat-api-cloudwatch]
    pipeline = cors versionnegotiation osprofiler ec2authtoken authtoken audit context apicwapp
    [pipeline:heat-api-cloudwatch-standalone]
    pipeline = cors versionnegotiation ec2authtoken context apicwapp
    [pipeline:heat-api-custombackend]
    pipeline = cors request_id faultwrap versionnegotiation context custombackendauth apiv1app
    [pipeline:heat-api-standalone]
    pipeline = cors request_id faultwrap http_proxy_to_wsgi versionnegotiation authurl authpassword context apiv1app
    ==
    policy.yaml: {}
  api_audit_map.conf: | 
    [DEFAULT]
    target_endpoint_type = None
    [path_keywords]
    abandon = None
    actions = None
    build_info = None
    detail = None
    events = event
    functions = None
    metadata = server
    outputs = output
    preview = None
    resource_types = resource_type
    resources = resource
    restore = None
    services = None
    signal = None
    snapshots = snapshot
    software_configs = software_config
    software_deployments = software_deployment
    stacks = stack
    template = None
    template_versions = template_version
    validate = None

  test_template_0: |
    heat_template_version: 2014-10-16

  test_template_1: | 
    heat_template_version: 2014-10-16
    description: Test template for rally create-update-delete scenario
    resources:
      test_string_one:
        type: OS::Heat::RandomString
        properties:
          length: 20
      test_string_two:
        type: OS::Heat::RandomString
        properties:
          length: 20

  test_template_2: |
    heat_template_version: 2013-05-23
    description: Template for testing caching.
    parameters:
      count:
        type: number
        default: 40
      delay:
        type: number
        default: 0.1
    resources:
      rg:
        type: OS::Heat::ResourceGroup
        properties:
          count:
            get_param: count
          resource_def:
              type: OS::Heat::TestResource
              properties:
                constraint_prop_secs:
                  get_param: delay

  test_template_3: | 
    heat_template_version: 2013-05-23
    parameters:
      attr_wait_secs:
        type: number
        default: 0.5
    resources:
      rg:
        type: OS::Heat::ResourceGroup
        properties:
          count: 10
          resource_def:
            type: OS::Heat::TestResource
            properties:
              attr_wait_secs:
                get_param: attr_wait_secs
    outputs:
      val1:
        value:
          get_attr:
            - rg
            - resource.0.output
      val2:
        value:
          get_attr:
            - rg
            - resource.1.output
      val3:
        value:
          get_attr:
            - rg
            - resource.2.output
      val4:
        value:
          get_attr:
            - rg
            - resource.3.output
      val5:
        value:
          get_attr:
            - rg
            - resource.4.output
      val6:
        value:
          get_attr:
            - rg
            - resource.5.output
      val7:
        value:
          get_attr:
            - rg
            - resource.6.output
      val8:
        value:
          get_attr:
            - rg
            - resource.7.output
      val9:
        value:
          get_attr:
            - rg
            - resource.8.output
      val10:
        value:
          get_attr:
            - rg
            - resource.9.output

  test_template_4: | 
    heat_template_version: 2014-10-16
    description: |
      Test template for create-update-delete-stack scenario in rally.
      The template deletes one resource from the stack defined by
      random-strings.yaml.template and re-creates it with the updated parameters
      (so-called update-replace). That happens because some parameters cannot be
      changed without resource re-creation. The template allows to measure performance
      of update-replace operation.
    resources:
      test_string_one:
        type: OS::Heat::RandomString
        properties:
          length: 20
      test_string_two:
        type: OS::Heat::RandomString
        properties:
          length: 40

